[{"D:\\INCUBATOR\\ToDo\\src\\index.tsx":"1","D:\\INCUBATOR\\ToDo\\src\\AddItemForm.tsx":"2","D:\\INCUBATOR\\ToDo\\src\\Todolist.tsx":"3","D:\\INCUBATOR\\ToDo\\src\\EditableSpan.tsx":"4","D:\\INCUBATOR\\ToDo\\src\\App.tsx":"5","D:\\INCUBATOR\\ToDo\\src\\state\\tasks-reducer.ts":"6","D:\\INCUBATOR\\ToDo\\src\\Task.tsx":"7","D:\\INCUBATOR\\ToDo\\src\\state\\todolists-reducer.ts":"8","D:\\INCUBATOR\\ToDo\\src\\state\\store.ts":"9","D:\\INCUBATOR\\ToDo\\src\\api\\todolists-api.ts":"10"},{"size":641,"mtime":1625140943815,"results":"11","hashOfConfig":"12"},{"size":1474,"mtime":1625140943449,"results":"13","hashOfConfig":"12"},{"size":3748,"mtime":1625160516109,"results":"14","hashOfConfig":"12"},{"size":952,"mtime":1625140943650,"results":"15","hashOfConfig":"12"},{"size":4456,"mtime":1625401138772,"results":"16","hashOfConfig":"12"},{"size":6676,"mtime":1625401533732,"results":"17","hashOfConfig":"12"},{"size":1729,"mtime":1625140944086,"results":"18","hashOfConfig":"12"},{"size":4228,"mtime":1625401618212,"results":"19","hashOfConfig":"12"},{"size":989,"mtime":1625158476268,"results":"20","hashOfConfig":"12"},{"size":2345,"mtime":1625164177190,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1ulsrpz",{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\INCUBATOR\\ToDo\\src\\index.tsx",[],["46","47"],"D:\\INCUBATOR\\ToDo\\src\\AddItemForm.tsx",["48","49","50"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\INCUBATOR\\ToDo\\src\\Todolist.tsx",["51","52","53","54","55","56"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\INCUBATOR\\ToDo\\src\\EditableSpan.tsx",[],"D:\\INCUBATOR\\ToDo\\src\\App.tsx",["57","58","59","60","61","62","63"],"D:\\INCUBATOR\\ToDo\\src\\state\\tasks-reducer.ts",["64"],"D:\\INCUBATOR\\ToDo\\src\\Task.tsx",["65","66","67"],"D:\\INCUBATOR\\ToDo\\src\\state\\todolists-reducer.ts",[],"D:\\INCUBATOR\\ToDo\\src\\state\\store.ts",[],["68","69"],"D:\\INCUBATOR\\ToDo\\src\\api\\todolists-api.ts",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":2,"column":9,"nodeType":"76","messageId":"77","endLine":2,"endColumn":12},{"ruleId":"74","severity":1,"message":"78","line":2,"column":14,"nodeType":"76","messageId":"77","endLine":2,"endColumn":20},{"ruleId":"74","severity":1,"message":"79","line":2,"column":22,"nodeType":"76","messageId":"77","endLine":2,"endColumn":33},{"ruleId":"80","severity":1,"message":"81","line":33,"column":8,"nodeType":"82","endLine":33,"endColumn":10,"suggestions":"83"},{"ruleId":"80","severity":1,"message":"84","line":37,"column":8,"nodeType":"82","endLine":37,"endColumn":33,"suggestions":"85"},{"ruleId":"80","severity":1,"message":"84","line":44,"column":8,"nodeType":"82","endLine":44,"endColumn":45,"suggestions":"86"},{"ruleId":"80","severity":1,"message":"84","line":46,"column":86,"nodeType":"82","endLine":46,"endColumn":116,"suggestions":"87"},{"ruleId":"80","severity":1,"message":"84","line":47,"column":92,"nodeType":"82","endLine":47,"endColumn":122,"suggestions":"88"},{"ruleId":"80","severity":1,"message":"84","line":48,"column":98,"nodeType":"82","endLine":48,"endColumn":128,"suggestions":"89"},{"ruleId":"80","severity":1,"message":"90","line":37,"column":8,"nodeType":"82","endLine":37,"endColumn":10,"suggestions":"91"},{"ruleId":"80","severity":1,"message":"92","line":41,"column":8,"nodeType":"82","endLine":41,"endColumn":10,"suggestions":"93"},{"ruleId":"80","severity":1,"message":"92","line":45,"column":8,"nodeType":"82","endLine":45,"endColumn":10,"suggestions":"94"},{"ruleId":"80","severity":1,"message":"92","line":49,"column":8,"nodeType":"82","endLine":49,"endColumn":10,"suggestions":"95"},{"ruleId":"80","severity":1,"message":"92","line":58,"column":8,"nodeType":"82","endLine":58,"endColumn":10,"suggestions":"96"},{"ruleId":"80","severity":1,"message":"92","line":62,"column":8,"nodeType":"82","endLine":62,"endColumn":10,"suggestions":"97"},{"ruleId":"80","severity":1,"message":"92","line":66,"column":8,"nodeType":"82","endLine":66,"endColumn":10,"suggestions":"98"},{"ruleId":"74","severity":1,"message":"99","line":7,"column":9,"nodeType":"76","messageId":"77","endLine":7,"endColumn":21},{"ruleId":"80","severity":1,"message":"84","line":15,"column":97,"nodeType":"82","endLine":15,"endColumn":130,"suggestions":"100"},{"ruleId":"80","severity":1,"message":"84","line":20,"column":8,"nodeType":"82","endLine":20,"endColumn":41,"suggestions":"101"},{"ruleId":"80","severity":1,"message":"84","line":24,"column":8,"nodeType":"82","endLine":24,"endColumn":41,"suggestions":"102"},{"ruleId":"70","replacedBy":"103"},{"ruleId":"72","replacedBy":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'FormControl' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.","ArrayExpression",["107"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["108"],["109"],["110"],["111"],["112"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["113"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["114"],["115"],["116"],["117"],["118"],["119"],"'TaskStatuses' is defined but never used.",["120"],["121"],["122"],["105"],["106"],"no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"125","fix":"127"},{"desc":"125","fix":"128"},{"desc":"125","fix":"129"},{"desc":"125","fix":"130"},{"desc":"131","fix":"132"},{"desc":"131","fix":"133"},{"desc":"131","fix":"134"},{"desc":"131","fix":"135"},{"desc":"131","fix":"136"},{"desc":"131","fix":"137"},{"desc":"131","fix":"138"},{"desc":"125","fix":"139"},{"desc":"125","fix":"140"},{"desc":"125","fix":"141"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"142","text":"143"},"Update the dependencies array to be: [props]",{"range":"144","text":"145"},{"range":"146","text":"145"},{"range":"147","text":"145"},{"range":"148","text":"145"},{"range":"149","text":"145"},"Update the dependencies array to be: [dispatch]",{"range":"150","text":"151"},{"range":"152","text":"151"},{"range":"153","text":"151"},{"range":"154","text":"151"},{"range":"155","text":"151"},{"range":"156","text":"151"},{"range":"157","text":"151"},{"range":"158","text":"145"},{"range":"159","text":"145"},{"range":"160","text":"145"},[1287,1289],"[dispatch, props.id]",[1395,1420],"[props]",[1633,1670],[1760,1790],[1884,1914],[2014,2044],[1172,1174],"[dispatch]",[1315,1317],[1459,1461],[1636,1638],[2034,2036],[2154,2156],[2306,2308],[721,754],[1027,1060],[1217,1250]]1633,1670],[1760,1790],[1884,1914],[2014,2044],[1163,1165],"[dispatch]",[1306,1308],[1450,1452],[1627,1629],[2025,2027],[2145,2147],[2297,2299],[721,754],[1027,1060],[1217,1250]]