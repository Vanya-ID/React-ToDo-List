[{"D:\\INCUBATOR\\ToDo\\src\\index.tsx":"1","D:\\INCUBATOR\\ToDo\\src\\AddItemForm.tsx":"2","D:\\INCUBATOR\\ToDo\\src\\Todolist.tsx":"3","D:\\INCUBATOR\\ToDo\\src\\EditableSpan.tsx":"4","D:\\INCUBATOR\\ToDo\\src\\App.tsx":"5","D:\\INCUBATOR\\ToDo\\src\\state\\tasks-reducer.ts":"6","D:\\INCUBATOR\\ToDo\\src\\Task.tsx":"7","D:\\INCUBATOR\\ToDo\\src\\state\\todolists-reducer.ts":"8","D:\\INCUBATOR\\ToDo\\src\\state\\store.ts":"9","D:\\INCUBATOR\\ToDo\\src\\api\\todolists-api.ts":"10"},{"size":641,"mtime":1625140943815,"results":"11","hashOfConfig":"12"},{"size":1474,"mtime":1625140943449,"results":"13","hashOfConfig":"12"},{"size":3748,"mtime":1625160516109,"results":"14","hashOfConfig":"12"},{"size":952,"mtime":1625140943650,"results":"15","hashOfConfig":"12"},{"size":4641,"mtime":1625237226501,"results":"16","hashOfConfig":"12"},{"size":7017,"mtime":1625167741008,"results":"17","hashOfConfig":"12"},{"size":1603,"mtime":1624547381985,"results":"18","hashOfConfig":"12"},{"size":3927,"mtime":1625237310450,"results":"19","hashOfConfig":"12"},{"size":989,"mtime":1625158476268,"results":"20","hashOfConfig":"12"},{"size":2345,"mtime":1625164177190,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1ulsrpz",{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\INCUBATOR\\ToDo\\src\\index.tsx",[],["47","48"],"D:\\INCUBATOR\\ToDo\\src\\AddItemForm.tsx",["49","50","51"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\INCUBATOR\\ToDo\\src\\Todolist.tsx",["52","53","54","55","56","57"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\INCUBATOR\\ToDo\\src\\EditableSpan.tsx",[],"D:\\INCUBATOR\\ToDo\\src\\App.tsx",["58","59","60","61","62","63","64","65","66","67","68","69"],"D:\\INCUBATOR\\ToDo\\src\\state\\tasks-reducer.ts",[],"D:\\INCUBATOR\\ToDo\\src\\Task.tsx",["70","71","72"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskType} from './Todolist'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\INCUBATOR\\ToDo\\src\\state\\todolists-reducer.ts",["73"],"D:\\INCUBATOR\\ToDo\\src\\state\\store.ts",[],["74","75"],"D:\\INCUBATOR\\ToDo\\src\\api\\todolists-api.ts",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":2,"column":9,"nodeType":"82","messageId":"83","endLine":2,"endColumn":12},{"ruleId":"80","severity":1,"message":"84","line":2,"column":14,"nodeType":"82","messageId":"83","endLine":2,"endColumn":20},{"ruleId":"80","severity":1,"message":"85","line":2,"column":22,"nodeType":"82","messageId":"83","endLine":2,"endColumn":33},{"ruleId":"86","severity":1,"message":"87","line":33,"column":8,"nodeType":"88","endLine":33,"endColumn":10,"suggestions":"89"},{"ruleId":"86","severity":1,"message":"90","line":37,"column":8,"nodeType":"88","endLine":37,"endColumn":33,"suggestions":"91"},{"ruleId":"86","severity":1,"message":"90","line":44,"column":8,"nodeType":"88","endLine":44,"endColumn":45,"suggestions":"92"},{"ruleId":"86","severity":1,"message":"90","line":46,"column":86,"nodeType":"88","endLine":46,"endColumn":116,"suggestions":"93"},{"ruleId":"86","severity":1,"message":"90","line":47,"column":92,"nodeType":"88","endLine":47,"endColumn":122,"suggestions":"94"},{"ruleId":"86","severity":1,"message":"90","line":48,"column":98,"nodeType":"88","endLine":48,"endColumn":128,"suggestions":"95"},{"ruleId":"80","severity":1,"message":"96","line":12,"column":5,"nodeType":"82","messageId":"83","endLine":12,"endColumn":21},{"ruleId":"80","severity":1,"message":"97","line":16,"column":5,"nodeType":"82","messageId":"83","endLine":16,"endColumn":14},{"ruleId":"80","severity":1,"message":"98","line":17,"column":5,"nodeType":"82","messageId":"83","endLine":17,"endColumn":23},{"ruleId":"80","severity":1,"message":"99","line":19,"column":5,"nodeType":"82","messageId":"83","endLine":19,"endColumn":17},{"ruleId":"86","severity":1,"message":"100","line":39,"column":8,"nodeType":"88","endLine":39,"endColumn":10,"suggestions":"101"},{"ruleId":"86","severity":1,"message":"102","line":43,"column":8,"nodeType":"88","endLine":43,"endColumn":10,"suggestions":"103"},{"ruleId":"86","severity":1,"message":"102","line":47,"column":8,"nodeType":"88","endLine":47,"endColumn":10,"suggestions":"104"},{"ruleId":"86","severity":1,"message":"102","line":51,"column":8,"nodeType":"88","endLine":51,"endColumn":10,"suggestions":"105"},{"ruleId":"86","severity":1,"message":"102","line":56,"column":8,"nodeType":"88","endLine":56,"endColumn":10,"suggestions":"106"},{"ruleId":"86","severity":1,"message":"102","line":61,"column":8,"nodeType":"88","endLine":61,"endColumn":10,"suggestions":"107"},{"ruleId":"86","severity":1,"message":"102","line":65,"column":8,"nodeType":"88","endLine":65,"endColumn":10,"suggestions":"108"},{"ruleId":"86","severity":1,"message":"102","line":70,"column":8,"nodeType":"88","endLine":70,"endColumn":10,"suggestions":"109"},{"ruleId":"86","severity":1,"message":"90","line":15,"column":97,"nodeType":"88","endLine":15,"endColumn":130,"suggestions":"110"},{"ruleId":"86","severity":1,"message":"90","line":20,"column":8,"nodeType":"88","endLine":20,"endColumn":41,"suggestions":"111"},{"ruleId":"86","severity":1,"message":"90","line":24,"column":8,"nodeType":"88","endLine":24,"endColumn":41,"suggestions":"112"},{"ruleId":"80","severity":1,"message":"113","line":4,"column":9,"nodeType":"82","messageId":"83","endLine":4,"endColumn":25},{"ruleId":"76","replacedBy":"114"},{"ruleId":"78","replacedBy":"115"},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'FormControl' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.","ArrayExpression",["118"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["119"],["120"],["121"],["122"],["123"],"'removeTodolistAC' is defined but never used.","'addTaskAC' is defined but never used.","'changeTaskStatusAC' is defined but never used.","'removeTaskAC' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["124"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["125"],["126"],["127"],["128"],["129"],["130"],["131"],["132"],["133"],["134"],"'AppRootStateType' is defined but never used.",["116"],["117"],"no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"137","fix":"139"},{"desc":"137","fix":"140"},{"desc":"137","fix":"141"},{"desc":"137","fix":"142"},{"desc":"143","fix":"144"},{"desc":"143","fix":"145"},{"desc":"143","fix":"146"},{"desc":"143","fix":"147"},{"desc":"143","fix":"148"},{"desc":"143","fix":"149"},{"desc":"143","fix":"150"},{"desc":"143","fix":"151"},{"desc":"137","fix":"152"},{"desc":"137","fix":"153"},{"desc":"137","fix":"154"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"155","text":"156"},"Update the dependencies array to be: [props]",{"range":"157","text":"158"},{"range":"159","text":"158"},{"range":"160","text":"158"},{"range":"161","text":"158"},{"range":"162","text":"158"},"Update the dependencies array to be: [dispatch]",{"range":"163","text":"164"},{"range":"165","text":"164"},{"range":"166","text":"164"},{"range":"167","text":"164"},{"range":"168","text":"164"},{"range":"169","text":"164"},{"range":"170","text":"164"},{"range":"171","text":"164"},{"range":"172","text":"158"},{"range":"173","text":"158"},{"range":"174","text":"158"},[1287,1289],"[dispatch, props.id]",[1395,1420],"[props]",[1633,1670],[1760,1790],[1884,1914],[2014,2044],[1269,1271],"[dispatch]",[1412,1414],[1556,1558],[1737,1739],[1951,1953],[2155,2157],[2275,2277],[2459,2461],[693,726],[955,988],[1145,1178]]